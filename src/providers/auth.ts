import { AuthBindings } from "@refinedev/core";
// import { User } from "@/graphql/schema.types";
import { API_URL, dataProvider } from "./data";

// Creds for demo purposes & ease of use when testing
export const authCredentials = {
  email: "michael.scott@dundermifflin.com",
  password: "demodemo",
};

export const authProvider: AuthBindings = {
  login: async ({ email }) => {
    try {
      // call login mutation
      // dataProvider.custom is used to make a custom req to GraphQL API
      // this calls dataProvider which goes through fetchWrapper function
      const { data } = await dataProvider.custom({
        url: API_URL,
        method: "post",
        headers: {},
        meta: {
          variables: { email },
          // pass email to check user exists & return accessToken on success
          rawQuery: `
                        mutation Login( $email: String! ) {
                            login(loginInput: { email: $email }) {
                                accessToken
                            }
                        }
                    `,
        },
      });
      
      // save accessToken to localStorage
      localStorage.setItem("access_token", data.login.accessToken);

      return {
        success: true,
        redirectTo: "/",
      };
    } catch (e) {
      const error = e as Error;
      
      return {
        success: false,
        error: {
          message: "message" in error ? error.message : "Login failed",
          name: "name" in error ? error.name : "Invalid email or password",
        },
      };
    }
  },

  // simply remove accessToken from localStorage & redirect
  logout: async () => {
    localStorage.removeItem("access_token");

    return {
      success: true,
      redirectTo: "/login",
    };
  },

  onError: async (error) => {
    // check to see if error is due to authentication
    // if so, set logout to true
    if (error.statusCode === "UNAUTHENTICATED") {
      return {
        logout: true,
        ...error
      };
    }

    return { error };
  },

  check: async () => {
    try {
      // get identity of user
      // verify user is authenticated or not
      await dataProvider.custom({
        url: API_URL,
        method: "post",
        headers: {},
        meta: {
          rawQuery: `
            query Me {
              me {
                name
              }
            }
          `,
        },
      });
      // if user is authenticated, redirect to home page
      return {
        authenticated: true,
        redirectTo: "/",
      };

    } catch (error) {
      // for any other error, redirect to login page
      return {
        authenticated: false,
        redirectTo: "/login",
      };
    }
  },

  getIdentity: async () => {
    const accessToken = localStorage.getItem("access_token");

    try {
      // call graphql api to get user info
      // utilizing me:any because graphql api doesnt have a type for the me query
      // *****add queries & mutations at a later time to switch to utlizing User generated by codegen*****
      const { data } = await dataProvider.custom<{ me: any }>({
        url: API_URL,
        method: "post",
        headers: accessToken
          ? {
            // send accessToken in Authorization header
              Authorization: `Bearer ${accessToken}`,
            }
          : {},
        meta: {
          // get user info 
          rawQuery: `
            query Me {
              me {
                id,
                name,
                email,
                phone,
                jobTitle,
                timezone
                avatarUrl
              }
            }
          `,
        },
      });

      return data.me;
    } catch (error) {
      return undefined;
    }
  }
};
